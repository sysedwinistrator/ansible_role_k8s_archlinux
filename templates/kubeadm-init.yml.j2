---
apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ k8s_bootstrap_token }}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///run/crio/crio.sock
  name: {{ inventory_hostname }}
  taints: null
  ignorePreflightErrors:
    - Swap
  kubeletExtraArgs:
    enforce-node-allocatable: ""
certificateKey: {{ k8s_certificate_key }}
...
---
apiServer:
  timeoutForControlPlane: 20m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager: {}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
{% if k8s_multimaster %}
    serverCertSANs:
{% for host in groups['k8s_master'] %}
    - {{ hostvars[host].ansible_fqdn }}
    - {{ hostvars[host].ansible_default_ipv4.address }}
{% endfor %}
    peerCertSANs:
{% for host in groups['k8s_master'] %}
    - {{ hostvars[host].ansible_fqdn }}
    - {{ hostvars[host].ansible_default_ipv4.address }}
{% endfor %}
{% endif %}
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: {{ k8s_version }}
{% if k8s_multimaster %}
controlPlaneEndpoint: "{{ k8s_apiserver_dns | default (k8s_apiserver_vip) }}:6443"
{% endif %}
networking:
  dnsDomain: {{ k8s_cluster_domain }}
  serviceSubnet: 10.96.0.0/12
  podSubnet: {{ k8s_pod_network_cidr }}
scheduler: {}
...
---
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    cacheTTL: 0s
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt
authorization:
  mode: Webhook
  webhook:
    cacheAuthorizedTTL: 0s
    cacheUnauthorizedTTL: 0s
cgroupDriver: systemd
cgroupsPerQOS: false
clusterDNS:
- 10.96.0.10
clusterDomain: {{ k8s_cluster_domain }}
cpuManagerReconcilePeriod: 0s
enforceNodeAllocatable: []
evictionPressureTransitionPeriod: 0s
failSwapOn: false
fileCheckFrequency: 0s
healthzBindAddress: 127.0.0.1
healthzPort: 10248
httpCheckFrequency: 0s
imageMinimumGCAge: 0s
kind: KubeletConfiguration
kubeletCgroups: '/system.slice/kubelet.service'
logging: {}
nodeStatusReportFrequency: 0s
nodeStatusUpdateFrequency: 0s
rotateCertificates: true
runtimeRequestTimeout: 0s
serverTLSBootstrap: true
shutdownGracePeriod: 0s
shutdownGracePeriodCriticalPods: 0s
staticPodPath: /etc/kubernetes/manifests
streamingConnectionIdleTimeout: 0s
syncFrequency: 0s
volumeStatsAggPeriod: 0s
...
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
bindAddress: 0.0.0.0
bindAddressHardFail: false
clientConnection:
  acceptContentTypes: ""
  burst: 0
  contentType: ""
  kubeconfig: /var/lib/kube-proxy/kubeconfig.conf
  qps: 0
clusterCIDR: {{ k8s_pod_network_cidr }}
configSyncPeriod: 0s
conntrack:
  maxPerCore: null
  min: null
  tcpCloseWaitTimeout: null
  tcpEstablishedTimeout: null
detectLocalMode: ""
enableProfiling: false
healthzBindAddress: ""
hostnameOverride: ""
iptables:
  masqueradeAll: false
  masqueradeBit: null
  minSyncPeriod: 0s
  syncPeriod: 0s
ipvs:
  excludeCIDRs: null
  minSyncPeriod: 0s
  scheduler: "{{ k8s_ipvs_scheduler }}"
  strictARP: true
  syncPeriod: 0s
  tcpFinTimeout: 0s
  tcpTimeout: 0s
  udpTimeout: 0s
kind: KubeProxyConfiguration
metricsBindAddress: ""
{% if k8s_ipvs %}
mode: ipvs
{% else %}
mode: iptables
{% endif %}
nodePortAddresses: null
oomScoreAdj: null
portRange: ""
showHiddenMetricsForVersion: ""
udpIdleTimeout: 0s
winkernel:
  enableDSR: false
  networkName: ""
  sourceVip: ""
